// static/js/main.js

/**
 * SecureScan - File Vulnerability Scanner
 * Main JavaScript functionality
 */

document.addEventListener('DOMContentLoaded', function() {
  // Initialize tooltips
  const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
  tooltipTriggerList.map(function(tooltipTriggerEl) {
      return new bootstrap.Tooltip(tooltipTriggerEl);
  });

  // File upload progress handling
  const uploadForm = document.getElementById('upload-form');
  if (uploadForm) {
      uploadForm.addEventListener('submit', function() {
          // Show loading screen
          document.querySelector('.loading-overlay').classList.remove('d-none');
          
          // Disable submit button to prevent double submission
          const submitButton = document.querySelector('button[type="submit"]');
          if (submitButton) {
              submitButton.disabled = true;
              submitButton.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Analisando...';
          }
      });
  }

  // File drag & drop handling
  const uploadArea = document.getElementById('upload-area');
  const fileInput = document.getElementById('file-input');
  
  if (uploadArea && fileInput) {
      uploadArea.addEventListener('click', function() {
          fileInput.click();
      });
      
      // Prevent default drag behaviors
      ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
          uploadArea.addEventListener(eventName, preventDefaults, false);
          document.body.addEventListener(eventName, preventDefaults, false);
      });
      
      // Highlight drop area when item is dragged over it
      ['dragenter', 'dragover'].forEach(eventName => {
          uploadArea.addEventListener(eventName, highlight, false);
      });
      
      ['dragleave', 'drop'].forEach(eventName => {
          uploadArea.addEventListener(eventName, unhighlight, false);
      });
      
      // Handle dropped files
      uploadArea.addEventListener('drop', handleDrop, false);
      
      function preventDefaults(e) {
          e.preventDefault();
          e.stopPropagation();
      }
      
      function highlight() {
          uploadArea.classList.add('highlight');
      }
      
      function unhighlight() {
          uploadArea.classList.remove('highlight');
      }
      
      function handleDrop(e) {
          const dt = e.dataTransfer;
          const files = dt.files;
          
          if (files && files[0]) {
              fileInput.files = files;
              updateFileName(files[0].name);
          }
      }
      
      // Display file name when selected
      fileInput.addEventListener('change', function() {
          if (this.files && this.files[0]) {
              updateFileName(this.files[0].name);
          } else {
              clearFileName();
          }
      });
      
      function updateFileName(name) {
          const filenameElement = document.getElementById('selected-filename');
          if (filenameElement) {
              filenameElement.textContent = name;
              filenameElement.classList.add('selected');
          }
      }
      
      function clearFileName() {
          const filenameElement = document.getElementById('selected-filename');
          if (filenameElement) {
              filenameElement.textContent = '';
              filenameElement.classList.remove('selected');
          }
      }
  }

  // Results page functionality
  const resultsTable = document.getElementById('results-table');
  if (resultsTable) {
      // Table sorting functionality
      const headers = resultsTable.querySelectorAll('th');
      
      headers.forEach(header => {
          header.addEventListener('click', function() {
              const table = this.closest('table');
              const index = Array.from(this.parentNode.children).indexOf(this);
              const isAscending = this.classList.contains('asc');
              
              // Toggle sorting direction
              headers.forEach(h => h.classList.remove('asc', 'desc'));
              this.classList.add(isAscending ? 'desc' : 'asc');
              
              // Get table rows and convert to array for sorting
              const rows = Array.from(table.querySelectorAll('tbody tr'));
              
              // Sort rows
              rows.sort((a, b) => {
                  const aValue = a.children[index].textContent.trim();
                  const bValue = b.children[index].textContent.trim();
                  
                  if (!isNaN(parseFloat(aValue)) && !isNaN(parseFloat(bValue))) {
                      return isAscending ? 
                          parseFloat(bValue) - parseFloat(aValue) : 
                          parseFloat(aValue) - parseFloat(bValue);
                  } else {
                      return isAscending ? 
                          bValue.localeCompare(aValue) : 
                          aValue.localeCompare(bValue);
                  }
              });
              
              // Remove existing rows and append sorted rows
              const tbody = table.querySelector('tbody');
              rows.forEach(row => tbody.appendChild(row));
          });
      });
      
      // Initialize table search functionality
      const searchInput = document.getElementById('table-search');
      if (searchInput) {
          searchInput.addEventListener('input', function() {
              const searchTerm = this.value.toLowerCase();
              const rows = resultsTable.querySelectorAll('tbody tr');
              
              rows.forEach(row => {
                  const text = row.textContent.toLowerCase();
                  row.style.display = text.includes(searchTerm) ? '' : 'none';
              });
          });
      }
  }

  // PDF Report generation (simplified mock)
  const downloadReportBtn = document.getElementById('download-report');
  if (downloadReportBtn) {
      downloadReportBtn.addEventListener('click', function() {
          alert('Em um sistema real, esta funcionalidade geraria um relatório PDF detalhado da análise.\n\nEm uma implementação completa, isso usaria uma biblioteca como jsPDF ou faria uma requisição ao backend para gerar o PDF.');
      });
  }
  
  // Animated counters
  const counters = document.querySelectorAll('.counter');
  if (counters.length > 0) {
      const speed = 200; // Animation speed
      
      counters.forEach(counter => {
          const target = +counter.innerText.replace(/[^\d.-]/g, '');
          const increment = target / speed;
          let current = 0;
          
          const updateCount = () => {
              if (current < target) {
                  current += increment;
                  
                  // Format numbers with commas and preserve original format
                  let formatted = counter.innerText;
                  if (counter.innerText.includes('%')) {
                      formatted = Math.min(current, target).toFixed(1) + '%';
                  } else if (counter.innerText.includes('+')) {
                      formatted = Math.floor(Math.min(current, target)) + '+';
                  } else {
                      formatted = Math.floor(Math.min(current, target)).toString();
                  }
                  
                  counter.innerText = formatted;
                  setTimeout(updateCount, 1);
              } else {
                  counter.innerText = counter.innerText.replace(/[\d.]+/, target);
              }
          };
          
          updateCount();
      });
  }
  
  // Add custom validation styles to forms
  const forms = document.querySelectorAll('.needs-validation');
  
  Array.from(forms).forEach(form => {
      form.addEventListener('submit', event => {
          if (!form.checkValidity()) {
              event.preventDefault();
              event.stopPropagation();
          }
          
          form.classList.add('was-validated');
      }, false);
  });
});

// Versão melhorada do JavaScript para upload de arquivos
// Adicione este código no seu arquivo static/js/main.js ou 
// substitua a seção correspondente no arquivo index.html

document.addEventListener('DOMContentLoaded', function() {
    const fileInput = document.getElementById('file-input');
    const selectedFilename = document.getElementById('selected-filename');
    const uploadForm = document.getElementById('upload-form');
    const scanButton = document.getElementById('scan-button');
    const uploadArea = document.getElementById('upload-area');
    
    if (fileInput && uploadForm) {
        // Display selected filename
        fileInput.addEventListener('change', function() {
            if (this.files && this.files[0]) {
                // Mostra o nome do arquivo selecionado
                selectedFilename.textContent = this.files[0].name;
                selectedFilename.classList.add('selected');
                
                // Submete o formulário automaticamente após selecionar o arquivo
                // Descomente a linha abaixo se desejar que o upload seja iniciado automaticamente
                // uploadForm.submit();
                
                // Ou realce o botão de análise para chamar atenção
                scanButton.classList.add('btn-pulse');
                setTimeout(() => scanButton.classList.remove('btn-pulse'), 2000);
            } else {
                selectedFilename.textContent = '';
                selectedFilename.classList.remove('selected');
            }
        });
        
        // Melhoria no comportamento de clique na área de upload
        uploadArea.addEventListener('click', function(e) {
            // Evita múltiplos cliques na área de upload se já tiver um input
            if (e.target !== fileInput) {
                fileInput.click();
            }
        });
    }
    
    // Resto do código permanece igual
});

// Adicione este estilo CSS para a animação de pulso no botão
// .btn-pulse {
//     animation: pulse 1.5s infinite;
// }
// 
// @keyframes pulse {
//     0% {
//         box-shadow: 0 0 0 0 rgba(40, 167, 69, 0.7);
//     }
//     70% {
//         box-shadow: 0 0 0 10px rgba(40, 167, 69, 0);
//     }
//     100% {
//         box-shadow: 0 0 0 0 rgba(40, 167, 69, 0);
//     }
// }

// Global function for copy to clipboard
function copyToClipboard(text, elementId) {
  navigator.clipboard.writeText(text).then(
      function() {
          // Show success message
          const element = document.getElementById(elementId);
          const originalText = element.innerHTML;
          
          element.innerHTML = '<i class="fas fa-check"></i> Copiado!';
          
          setTimeout(function() {
              element.innerHTML = originalText;
          }, 2000);
      }, 
      function() {
          // Show failure message
          alert('Falha ao copiar para a área de transferência. Por favor, tente novamente.');
      }
  );
}
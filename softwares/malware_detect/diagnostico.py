#!/usr/bin/env python
"""
Script de diagnóstico para verificar a configuração e funcionamento
do sistema de análise de arquivos.
"""

import os
import sys
import json
import tempfile
import hashlib

def run_diagnostics():
    """Executa uma série de verificações diagnósticas no sistema."""
    print("=== Diagnóstico do Sistema de Análise de Arquivos ===")
    
    # Verifica a estrutura de diretórios
    directories = [
        'static',
        'static/css',
        'static/js',
        'static/img',
        'templates',
        'uploads',
        'results',
        'utils'
    ]
    
    print("\n1. Verificando diretórios...")
    for directory in directories:
        if os.path.exists(directory):
            print(f"✓ Diretório encontrado: {directory}")
        else:
            print(f"✗ Diretório não encontrado: {directory}")
            os.makedirs(directory, exist_ok=True)
            print(f"  → Diretório criado: {directory}")
    
    # Verifica os arquivos principais
    print("\n2. Verificando arquivos principais...")
    required_files = [
        'app.py',
        'config.py',
        'static/css/main.css',
        'static/js/main.js',
        'templates/base.html',
        'templates/index.html',
        'templates/result.html',
        'templates/about.html',
        'utils/__init__.py',
        'utils/scanner.py',
        'utils/validators.py'
    ]
    
    for file_path in required_files:
        if os.path.exists(file_path):
            print(f"✓ Arquivo encontrado: {file_path}")
        else:
            print(f"✗ Arquivo não encontrado: {file_path}")
    
    # Testa a geração e salvamento de resultados
    print("\n3. Testando geração e salvamento de resultados...")
    try:
        # Importar módulos necessários
        sys.path.insert(0, os.getcwd())
        try:
            from utils.scanner import scan_file
            print("✓ Módulo de escaneamento importado com sucesso")
        except ImportError:
            print("✗ Erro ao importar módulo de escaneamento")
            return
        
        # Criar arquivo de teste
        with tempfile.NamedTemporaryFile(suffix='.txt', delete=False) as temp:
            temp.write(b"Este e um arquivo de teste para diagnostico do sistema.\n")
            temp_path = temp.name
        
        print(f"✓ Arquivo de teste criado: {temp_path}")
        
        # Calcular hash SHA-256 do arquivo
        sha256_hash = hashlib.sha256()
        with open(temp_path, "rb") as f:
            for byte_block in iter(lambda: f.read(4096), b""):
                sha256_hash.update(byte_block)
        file_hash = sha256_hash.hexdigest()
        
        # Escanear o arquivo
        scan_results = scan_file(temp_path, os.path.basename(temp_path))
        print("✓ Função de escaneamento executada")
        
        # Verificar estrutura dos resultados
        if not isinstance(scan_results, dict):
            print(f"✗ scan_results não é um dicionário: {type(scan_results)}")
            return
            
        if 'summary' not in scan_results or 'engines' not in scan_results:
            print(f"✗ scan_results não contém as chaves esperadas: {scan_results.keys()}")
            return
        
        print("✓ Estrutura de resultados validada")
        print(f"  → Chaves no resultado: {scan_results.keys()}")
        print(f"  → Chaves no summary: {scan_results['summary'].keys()}")
        print(f"  → Número de engines: {len(scan_results['engines'])}")
        
        # Testar salvamento em JSON
        results_dir = 'results'
        os.makedirs(results_dir, exist_ok=True)
        
        test_result_file = os.path.join(results_dir, "test_result.json")
        
        # Preparar estrutura de dados
        result_data = {
            "scan_id": "test_scan",
            "timestamp": "2025-04-22T12:00:00",
            "file": {
                "name": os.path.basename(temp_path),
                "sha256": file_hash
            },
            "summary": scan_results["summary"],
            "engines": scan_results["engines"]
        }
        
        # Salvar em arquivo
        with open(test_result_file, 'w') as f:
            json.dump(result_data, f, indent=2)
        
        print(f"✓ Arquivo de resultado salvo: {test_result_file}")
        
        # Verificar se o arquivo foi salvo corretamente
        if os.path.exists(test_result_file):
            with open(test_result_file, 'r') as f:
                saved_data = json.load(f)
            
            print("✓ Arquivo de resultado carregado com sucesso")
            print(f"  → Chaves no resultado carregado: {saved_data.keys()}")
            
            # Verificar se todas as chaves necessárias estão presentes
            required_keys = ['scan_id', 'timestamp', 'file', 'summary', 'engines']
            missing_keys = [key for key in required_keys if key not in saved_data]
            
            if missing_keys:
                print(f"✗ Chaves ausentes no resultado salvo: {missing_keys}")
            else:
                print("✓ Todas as chaves necessárias estão presentes no resultado salvo")
        
        # Limpar arquivos de teste
        os.unlink(temp_path)
        print(f"✓ Arquivo de teste removido: {temp_path}")
        
    except Exception as e:
        import traceback
        print(f"✗ Erro durante o teste: {str(e)}")
        print(traceback.format_exc())
    
    print("\n=== Diagnóstico concluído ===")

if __name__ == "__main__":
    run_diagnostics()